#!/bin/bash

read -d '' help <<-EOF

Dump Table Utility, by Tomer Godinger, October 2013
Using a file created by the generateTable utility, dumps all the memory
described in the input file into a single binary file.

Usage: dumpTable [OPTION] -i TABLE_FILE

Options:
  -h, -?           Print this information
  -i TABLE_FILE    The table file according to which to create the dump
  -o OUTPUT_FILE   Write the output to this file
  -d DUMP_DIR      Directory in which dumped memory is stored (usually where
                   the emulator and emulator-arm files are located)
  -m MAP_FILE      Generate map file
  -f OFFSET_SHIFT  Value by which all addresses in map file are offset
                   (default is 0xc0000000)
  -p               Keep intermediary files
  -t               Silent dump mode (do not show dumpMem outputs)
  
Report bugs to whomever is in charge nowadays.
EOF

# A POSIX variable
OPTIND=1         # Reset in case getopts has been used previously in the shell.

# Default option values
output_file="Snapshot"
dump_dir="."
offset_shift=0xc0000000


# Parse command line arguments
while getopts "h?i:o:d:m:f:pt" opt; do
    case "$opt" in
    h|\?)
        echo "$help"
        exit 0
        ;;
    i)  input_file=$OPTARG
        ;;
    o)  output_file=$OPTARG
        ;;
    d)  dump_dir=$OPTARG
        ;;
    m)  map_file=$OPTARG
        ;;
    f)  offset_shift=$OPTARG
        ;;
    p)  keep_intermediaries=1
        ;;
    t)  silent_dump=1
        ;;
    esac
done

shift $((OPTIND-1))

[ "$1" = "--" ] && shift

if [ "$input_file" == "" ];
then
  echo "$help"
  exit 0
fi

# If a map file was requested, clear the file if it exists
if [ "$map_file" != "" ];
then
  > $map_file
fi

# Dump the memory corresponding to each marked global variable to its own file
num_of_lines=$(wc -l < "$input_file")
name_prefix_digits=${#num_of_lines}
counter=0
while read line; do
  # Parse the lines in the given input file (without leading zeros on size field)
  name=`echo $line | sed 's/\(.*\) \(.*\) 0*\(.*\)/\1/'`
  addr=`echo $line | sed 's/\(.*\) \(.*\) 0*\(.*\)/\2/'`
  size=`echo $line | sed 's/\(.*\) \(.*\) 0*\(.*\)/\3/'`
  
  # Transform the address
  addr=`printf "%X" $((0x$addr - $offset_shift))`
  
  # If a map file was request it, append this line to it
  if [ "$map_file" != "" ]
  then
    echo $name $addr $size >> $map_file
  fi
  
  # Attach an increasing number to the beginning of the name, so as to preserve
  # the relative order of the entries in the final file
  name=`printf "%0${name_prefix_digits}d" $counter`_$name
  
  # Dump the specified memory
  if [ $silent_dump ]
  then
    ./dumpMem $name $addr $size > /dev/null
  else
    ./dumpMem $name $addr $size
  fi
  
  counter=$((counter + 1))
done < $input_file

# Gather all the dumped files, if necessary
if [ "$dump_dir" != "." ]
then
  mv $dump_dir/*.mem ./
fi

# Combine all the dumped files
cat *.mem >> $output_file

# Remove the individual files, unless specifically asked not to
if [ ! $keep_intermediaries ]
then
  rm *.mem
fi
